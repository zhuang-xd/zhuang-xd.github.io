import{_ as a,o as e,c as t,O as r}from"./chunks/framework.4afe7240.js";const R=JSON.parse('{"title":"USART","description":"","frontmatter":{"tags":"待成文","title":"USART","date":"2023-06-08T00:00:00.000Z"},"headers":[],"relativePath":"pages/USART.md","filePath":"pages/USART.md","lastUpdated":1686223285000}'),s={name:"pages/USART.md"},o=r('<h1 id="usart" tabindex="-1">USART <a class="header-anchor" href="#usart" aria-label="Permalink to &quot;USART&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>基本功能和[[UART]]相同，但更强大</p><h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h2><ul><li>将并行数据转换为串行数据进行传输</li><li>将串行数据转换为并行数据进行处理</li></ul><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><ul><li><a href="./串行总线.html">串行</a>、<a href="./同步总线.html">同步</a>或<a href="./异步总线.html">异步</a>、<a href="./全双工总线.html">全双工</a></li></ul><p>USART和UART都是串行通信接口，它们的基本功能都是</p><p>UART（Universal Asynchronous Receiver/Transmitter）是一种通用异步收发器，通常用于简单的串行通信。UART使用固定的波特率进行通信，数据帧格式通常为8位数据位、1位停止位和可选的奇偶校验位。UART通信中的数据传输是异步的，没有时钟信号进行同步。UART通信通常使用硬件流控制或软件流控制来实现数据的发送和接收。</p><p>USART（Universal Synchronous/Asynchronous Receiver/Transmitter）是一种通用同步/异步收发器，除了支持UART通信协议外，还可以支持同步通信协议，如SPI、I2C等。USART通信可以选择异步模式或同步模式，可以设置多种波特率和数据帧格式。USART还支持硬件流控制和多主机模式等高级功能，可以满足更复杂的通信需求。</p><p>因此，USART相比UART具有更加灵活和强大的通信能力，可以支持更多的通信协议和工作模式，但成本也更高。在实际应用中，需要根据具体的需求来选择UART或USART进行串行通信。</p>',11),l=[o];function i(n,h,c,T,d,A){return e(),t("div",null,l)}const U=a(s,[["render",i]]);export{R as __pageData,U as default};
