import{_ as l,o as i,c as e,V as o}from"./chunks/framework.364d6ed5.js";const u="/assets/20230611112019829.63ed9303.png",d="/assets/20230611140641652.df2b170b.png",a="/assets/20230611143632272.623a50f8.png",c="/assets/20230611145335107.d0079055.png",p=JSON.parse('{"title":"2023-06-11","description":"","frontmatter":{},"headers":[],"relativePath":"journals/2023-06-11.md","filePath":"journals/2023-06-11.md","lastUpdated":1686486320000}'),r={name:"journals/2023-06-11.md"},t=o('<h1 id="_2023-06-11" tabindex="-1">2023-06-11 <a class="header-anchor" href="#_2023-06-11" aria-label="Permalink to &quot;2023-06-11&quot;">​</a></h1><ul><li><h2 id="任务" tabindex="-1">任务 <a class="header-anchor" href="#任务" aria-label="Permalink to &quot;任务&quot;">​</a></h2><ul><li>[[作业 实现字符串输入输出]]</li></ul></li><li><h2 id="补充" tabindex="-1">补充 <a class="header-anchor" href="#补充" aria-label="Permalink to &quot;补充&quot;">​</a></h2><ul><li></li></ul></li><li><h2 id="复习" tabindex="-1">复习 <a class="header-anchor" href="#复习" aria-label="Permalink to &quot;复习&quot;">​</a></h2><ul><li>ARM体系结构和接口技术 <ul><li>ARM相关概念 <ul><li>特殊功能寄存器 <ul><li>SP</li><li>LR</li><li>PC</li><li>CPSR</li><li>SPSR</li></ul></li></ul></li><li>汇编 <ul><li>汇编指令 <ul><li>通用指令格式 <ul><li><code>&lt;opcode&gt; {cond}{s} Rd,Rn,#oprand2</code></li></ul></li><li>数据操作指令 <ul><li>数据搬移指令 <ul><li>立即数 <ul><li><code>mov</code></li><li><code>mvn</code> 按位取反</li></ul></li><li>非立即数 <ul><li><code>ldr</code></li></ul></li></ul></li><li>移位操作指令 <ul><li><code>lsl</code></li><li><code>lsr</code></li><li><code>asr</code> 算数右移</li><li><code>ror</code></li></ul></li><li>位运算操作指令 <ul><li><code>and</code> 清零</li><li><code>orr</code> 置1</li><li><code>eor</code> 按位或</li><li><code>bic</code></li></ul></li><li>数据操作指令 <ul><li><code>add</code></li><li><code>adc</code></li><li><code>sub</code></li><li><code>subc</code></li><li><code>mul</code></li></ul></li><li>比较指令 <ul><li><code>cmp</code></li></ul></li></ul></li><li>跳转指令 <ul><li><code>b</code></li><li><code>bl</code></li></ul></li><li>特殊功能寄存器 <ul><li><code>mrs</code><ul><li>写cpsr</li></ul></li><li><code>msr</code><ul><li>读取cpsr</li></ul></li></ul></li><li>内存操作指令 <ul><li>单寄存器操作指令 <ul><li><code>ldr ldrb ldrh</code></li></ul></li><li>多寄存器 <ul><li><code>ldm stm</code></li><li><code>ldmfd</code></li></ul></li><li>栈指针 <ul><li><code>ldmfd</code></li><li><code>stmfd</code></li></ul></li></ul></li></ul></li><li>混合编程 <ul><li>汇编调用函数</li><li>c调用汇编函数</li><li>c内敛汇编函数</li></ul></li></ul></li></ul></li><li>接口技术 <ul><li>LED 灯实验 <ul><li>cortex-a7核实现</li><li>cortex-m4核实现</li></ul></li><li>UART实验 （串口实验） <ul><li>PC &lt;---&gt; TARGET <ul><li>ubuntu和单片机通信</li></ul></li></ul></li><li>按键中断实验 <ul><li>异常处理流程</li><li>按键、光电、火焰传感器、人体红外传感器</li></ul></li><li>IIC实验 <ul><li>采集温度湿度传感器</li></ul></li><li>SPI实验 <ul><li>数码管显示相应的值</li></ul></li><li>PWM实验 <ul><li>风扇</li><li>蜂鸣器</li><li>马达</li></ul></li></ul></li></ul></li><li><h2 id="后期" tabindex="-1">后期 <a class="header-anchor" href="#后期" aria-label="Permalink to &quot;后期&quot;">​</a></h2><ul><li>系统移植 7 天</li><li>linux驱动开发 11 天</li><li>面试题 <ul><li>串口</li></ul></li></ul></li><li><h2 id="arm-day07" tabindex="-1">arm-day07 <a class="header-anchor" href="#arm-day07" aria-label="Permalink to &quot;arm-day07&quot;">​</a></h2><ul><li>[[FIQ为什么比IRQ快]]</li><li>Universal synchronous/asynchronous receiver transmitter (USART/UART)</li><li><strong>发送字符流程 （2612）</strong><ol><li>编程将USART_CR1中的M位设置为定义字长。</li><li>使用USART_BRR寄存器选择所需的波特率。</li><li>在USART_CR2中编程停止位的数量。</li><li>通过将USART_CR1寄存器中的UE位写为1来启用USART。</li><li>如果需要进行多缓冲区通信，则在USART_CR3中选择DMA使能（DMAT）。根据第53.5.10节的说明配置DMA寄存器：USART多处理器通信。</li><li>设置TE位于USART_CR1中以发送空闲帧作为第一次传输。</li><li>将要发送的数据写入USART_TDR寄存器。在单个缓冲区的情况下，为每个要传输的数据重复此操作。 <ul><li>当FIFO模式被禁用时，将数据写入USART_TDR会清除TXE标志。</li><li>当FIFO模式被启用时，将数据写入USART_TDR会将一个数据添加到TXFIFO中。在TXFNF标志设置时执行对USART_TDR的写操作。此标志保持设置，直到TXFIFO已满。</li></ul></li><li>当最后一个数据被写入USART_TDR寄存器时，等待TC=1。 <ul><li>当FIFO模式被禁用时，这表示最后一帧的传输已完成。</li><li>当FIFO模式被启用时，这表示TXFIFO和移位寄存器都为空。<br> 这个检查是必需的，以避免在禁用USART或进入时破Halt模式坏最后一次传输。</li></ul></li></ol><ul><li>总结 <ul><li><img src="'+u+'" alt=""></li></ul></li></ul></li><li><strong>接收字符流程</strong> （53.5.6 USART receiver 2614） <ul><li>设置串口</li></ul></li><li>[[为什么要用 FIFO mode disabled]]</li><li>[[寄存器保留位的作用]]</li><li>[[UART既然16位的采样率各方面都优于8位，为什么还需要有8位的]]</li><li>如何设置BRR寄存器 <ul><li>BRR = 时钟频率 / 波特率</li><li>ISR寄存器</li></ul></li><li><code>.h</code><ul><li><img src="'+d+'" alt=""></li></ul></li><li><code>.c</code><ul><li>初始化 <ul><li><img src="'+a+'" alt=""></li></ul></li><li>发送</li></ul></li><li>现象 <ul><li>字符发送 <ul><li><img src="'+c+'" alt=""></li></ul></li><li>字符串</li></ul></li></ul></li></ul>',2),s=[t];function n(_,R,m,h,T,A){return i(),e("div",null,s)}const b=l(r,[["render",n]]);export{p as __pageData,b as default};
