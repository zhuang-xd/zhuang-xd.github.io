import{_ as r,o as t,c as s,z as e,a as i}from"./chunks/framework.4afe7240.js";const u=JSON.parse('{"title":"Bit set or reset registers方式和from on-chip peripheral的区别","description":"","frontmatter":{"tags":"待成文","title":"Bit set or reset registers方式和from on-chip peripheral的区别","sidebar":false,"date":"2023-06-06T00:00:00.000Z"},"headers":[],"relativePath":"pages/Bit set or reset registers方式和from on-chip peripheral的区别.md","filePath":"pages/Bit set or reset registers方式和from on-chip peripheral的区别.md","lastUpdated":1686285451000}'),o={name:"pages/Bit set or reset registers方式和from on-chip peripheral的区别.md"},p=e("h1",{id:"bit-set-or-reset-registers方式和from-on-chip-peripheral的区别",tabindex:"-1"},[i("Bit set or reset registers方式和from on-chip peripheral的区别 "),e("a",{class:"header-anchor",href:"#bit-set-or-reset-registers方式和from-on-chip-peripheral的区别","aria-label":'Permalink to "Bit set or reset registers方式和from on-chip peripheral的区别"'},"​")],-1),a=e("p",null,"在 STM32MP157 中，Bit set/reset registers 和 from on-chip peripheral 都是用来设置 GPIO 引脚状态的方式。它们的区别在于：",-1),l=e("ol",null,[e("li",null,[e("p",null,"Bit set/reset registers 是通过写寄存器的方式来设置 GPIO 引脚的状态。具体来说，通过写 GPIOx_BSRR 寄存器可以将某个引脚的输出状态设置为高电平，通过写 GPIOx_BRR 寄存器可以将某个引脚的输出状态设置为低电平。这种方式可以快速地设置 GPIO 引脚的状态，但是需要手动控制寄存器的写操作，比较繁琐。")]),e("li",null,[e("p",null,"From on-chip peripheral 方式是通过使用 STM32MP157 内部的外设模块来设置 GPIO 引脚的状态。具体来说，可以使用 GPIO 外设模块提供的函数来设置某个 GPIO 引脚的状态，例如使用 HAL 库中的 GPIO_WritePin 函数将某个引脚的输出状态设置为高电平或低电平。这种方式比较方便，不需要手动控制寄存器的写操作，但是在某些情况下可能会比较慢。")])],-1),n=e("p",null,"因此，选择 Bit set/reset registers 方式还是 From on-chip peripheral 方式取决于具体的应用场景和需求。如果需要快速地设置 GPIO 引脚的状态，可以选择 Bit set/reset registers 方式；如果需要方便地设置 GPIO 引脚的状态，可以选择 From on-chip peripheral 方式。",-1),h=[p,a,l,n];function c(_,d,m,f,g,B){return t(),s("div",null,h)}const O=r(o,[["render",c]]);export{u as __pageData,O as default};
