import{_ as e,o as t,c as a,O as p}from"./chunks/framework.4afe7240.js";const h=JSON.parse('{"title":"波特率","description":"","frontmatter":{"tags":"待成文","title":"波特率","date":"2023-06-08T00:00:00.000Z"},"headers":[],"relativePath":"pages/波特率.md","filePath":"pages/波特率.md","lastUpdated":1686218490000}'),_={name:"pages/波特率.md"},s=p('<h1 id="波特率" tabindex="-1">波特率 <a class="header-anchor" href="#波特率" aria-label="Permalink to &quot;波特率&quot;">​</a></h1><ul><li>每秒发送0或1的个数</li><li>通过波特率可用知道每一位的的时间</li></ul><p>115200 每秒可用输出115200位数据</p><p>波特率越高，每位数据的时间长度越短，就越容易受到电磁干扰从而导致通信不可靠。</p><p>是的，1.5位停止位的配置中，发送端在发送完一个数据位后，会在数据位和停止位之间插入一个半个停止位的时间，然后再发送下一个数据位。在这个半个停止位的时间内，发送端不会发送任何数据，也不会发送任何停止位信号。接收端在接收到数据位后，也会等待一个半个停止位的时间，然后再判断下一个数据位的开始位置。这样可以提高通信的可靠性和稳定性。</p><p>那uart是异步的，双方时钟是不同的，接收方怎么知道这是1.5停止位呢</p><p>在UART通信中，接收端是通过检测停止位的边界来确定数据位的开始和结束位置的。在标准的1位停止位配置中，停止位的长度是一个完整的位周期，而在1.5位停止位的配置中，停止位的长度是一个位周期加上半个位周期。因此，接收端在接收到一个字符后，会等待一个完整的位周期，然后再等待半个位周期，如果在这个时间内没有检测到下一个字符的起始位，则可以确定前一个字符的停止位长度为1.5个位周期，从而判断出当前字符的开始位置。</p><p>需要注意的是，1.5位停止位并不是一个标准的配置，因此在使用时需要确保发送端和接收端的配置是一致的，否则可能会出现通信错误。</p><p>UART发送端和接收端的波特率通常是相同的。波特率是指数据传输的速率，也就是每秒钟传输的比特数。在UART通信中，发送端和接收端需要以相同的波特率进行通信，才能保证数据的正确传输。</p><p>如果发送端和接收端的波特率不一致，就会导致数据传输的速率不匹配，从而引起通信错误。例如，如果发送端的波特率为9600，而接收端的波特率为115200，那么接收端就会无法正确地解析发送端发送的数据，因为接收端的时钟周期比发送端的时钟周期短，无法正确地捕获数据位。</p><p>因此，在UART通信中，发送端和接收端的波特率必须相同，才能确保数据的正确传输。</p><p>UART和同步通信的主要区别在于时钟同步的方式不同。</p><p>在同步通信中，发送端和接收端的时钟是相互关联的，接收端会根据发送端的时钟来进行数据采样，从而实现时钟同步。而在UART通信中，发送端和接收端的时钟是独立的，没有相互关联的关系，因此需要通过波特率来保证时钟同步。</p><p>在UART通信中，发送端和接收端的波特率必须相同，才能保证数据的正确传输。如果发送端和接收端的波特率不同，就会导致数据传输的速率不匹配，从而引起通信错误。因此，UART通信中的时钟同步是基于波特率的，而同步通信中的时钟同步是基于相互关联的时钟信号的。</p><p>另外，UART通信是异步通信，不需要在数据中添加同步信号，而同步通信需要在数据中添加同步信号，以便接收端能够正确地采样数据。</p>',15),o=[s];function r(i,c,l,n,d,T){return t(),a("div",null,o)}const m=e(_,[["render",r]]);export{h as __pageData,m as default};
