import{_ as a,o as d,c as s,C as e,a as t}from"./chunks/framework.364d6ed5.js";const h=JSON.parse('{"title":"为什么要用 FIFO mode disabled","description":"","frontmatter":{"tags":"待成文","date":"2023-06-11T00:00:00.000Z","title":"为什么要用 FIFO mode disabled","sidebar":false},"headers":[],"relativePath":"pages/为什么要用 FIFO mode disabled.md","filePath":"pages/为什么要用 FIFO mode disabled.md","lastUpdated":1686486577000}'),o={name:"pages/为什么要用 FIFO mode disabled.md"},i=e("h1",{id:"为什么要用-fifo-mode-disabled",tabindex:"-1"},[t("为什么要用 FIFO mode disabled "),e("a",{class:"header-anchor",href:"#为什么要用-fifo-mode-disabled","aria-label":'Permalink to "为什么要用 FIFO mode disabled"'},"​")],-1),l=e("p",null,"FIFO（First In First Out）模式是USART的一种工作模式，它可以在USART内部实现一个缓冲区，以提高数据传输的效率。在FIFO模式下，USART会在接收到数据后立即将其存储在缓冲区中，而不是等待CPU读取。类似地，在发送数据时，USART会将数据存储在缓冲区中，并在缓冲区为空时自动发送下一个数据。",-1),F=e("p",null,"然而，在某些情况下，禁用FIFO模式可能是必要的。例如，在实时系统中，需要最小化数据传输的延迟，因此需要立即处理接收到的数据。在这种情况下，禁用FIFO模式可以使USART立即将接收到的数据传输到CPU，而不必等待缓冲区填满。",-1),_=e("p",null,"此外，禁用FIFO模式还可以降低USART的复杂性和功耗，因为它不需要额外的硬件来实现缓冲区。因此，在某些特定的应用场景下，禁用FIFO模式可能是更好的选择。",-1),n=[i,l,F,_];function r(c,m,p,O,I,f){return d(),s("div",null,n)}const u=a(o,[["render",r]]);export{h as __pageData,u as default};
